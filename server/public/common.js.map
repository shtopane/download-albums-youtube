{"version":3,"sources":["./src/app/shared/services/playlist/playlist.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,oGAA2C;AAC3C,6GAAkD;AAElD,mFAAsC;AAGtC,iHAA2D;AAM3D;IAGE,yBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAElC,gDAAsB,GAA7B,UAA8B,GAAW;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,yBAAW,CAAC,SAAS,uBAAoB,EAAE,EAAE,GAAG,OAAE,CAAC,CAAC;IAC/E,CAAC;IAEM,sCAAY,GAAnB,UAAoB,GAAW,EAAE,QAAgB;QAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,yBAAW,CAAC,SAAS,WAAQ,EAAE,EAAE,QAAQ,YAAE,GAAG,OAAE,CAAC,CAAC;IAC7E,CAAC;IAEM,qCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,yBAAW,CAAC,SAAS,cAAW,CAAC,CAAC;IACtE,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,QAAkB;QACxC,IAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,EAAE;YAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC1B;IACH,CAAC;IAEM,0CAAgB,GAAvB;QACE,IAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;SAC/B;QACD,OAAO,SAAE,sBAAM,IAAI,CAAC,QAAQ,EAAG,CAAC;IAClC,CAAC;;gBA1ByB,iBAAU;;IAHzB,eAAe;QAH3B,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;iDAI0B,iBAAU;OAHzB,eAAe,CA8B3B;IAAD,sBAAC;CAAA;AA9BY,0CAAe","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\n\r\nimport { environment } from 'src/environments/environment';\r\nimport { Playlist } from '../../../../../shared-models/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlaylistService {\r\n  private playlist: Playlist;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public downloadYotubePlaylist(url: string): Observable<any> {\r\n    return this.http.post(`${environment.serverUrl}/download-playlist`, { url });\r\n  }\r\n\r\n  public sendPlaylist(url: string, playlist: string): Observable<any> {\r\n    return this.http.post(`${environment.serverUrl}/songs`, { playlist, url });\r\n  }\r\n\r\n  public getPlaylist(): Observable<Playlist> {\r\n    return this.http.get<Playlist>(`${environment.serverUrl}/playlist`);\r\n  }\r\n\r\n  public setLocalPlaylist(playlist: Playlist): void {\r\n    if (playlist.albumName && playlist.playlist) {\r\n      this.playlist = playlist;\r\n    }\r\n  }\r\n\r\n  public getLocalPlaylist(): Observable<Playlist> {\r\n    const localPlaylist = JSON.parse(localStorage.getItem('playlist'));\r\n    if (!this.playlist) {\r\n      this.playlist = localPlaylist;\r\n    }\r\n    return of({ ...this.playlist });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}